import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Image,
  Share,
  Linking
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useFaturasFornecedor } from '../../context/FaturasFornecedorContext';

export default function DetalhesFaturaFornecedor({ route, navigation }) {
  const { faturaId } = route.params;
  const { faturas, marcarComoPaga, removerFatura } = useFaturasFornecedor();
  const [fatura, setFatura] = useState(null);

  useEffect(() => {
    const faturaEncontrada = faturas.find(f => f.id === faturaId);
    setFatura(faturaEncontrada);
  }, [faturaId, faturas]);

  if (!fatura) {
    return (
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => navigation.goBack()}>
            <Ionicons name="arrow-back" size={24} color="#fff" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Fatura n√£o encontrada</Text>
        </View>
      </View>
    );
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'Paga': return '#4caf50';
      case 'Pendente': return '#ff9800';
      case 'Vencida': return '#f44336';
      default: return '#666';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'Paga': return 'checkmark-circle';
      case 'Pendente': return 'time';
      case 'Vencida': return 'warning';
      default: return 'help-circle';
    }
  };

  const confirmarPagamento = () => {
    Alert.alert(
      'Confirmar Pagamento',
      `Marcar fatura ${fatura.numero} como paga?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Confirmar',
          onPress: () => marcarComoPaga(fatura.id)
        }
      ]
    );
  };

  const confirmarRemocao = () => {
    Alert.alert(
      'Remover Fatura',
      `Tem certeza que deseja remover a fatura ${fatura.numero}?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Remover',
          style: 'destructive',
          onPress: () => {
            removerFatura(fatura.id);
            navigation.goBack();
          }
        }
      ]
    );
  };

  const compartilharFatura = async () => {
    try {
      const conteudoFatura = `
FATURA DE FORNECEDOR
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìã N√∫mero: ${fatura.numero}
üè¢ Fornecedor: ${fatura.fornecedor.nome}
üìÖ Data: ${new Date(fatura.dataFatura).toLocaleDateString('pt-PT')}
${fatura.dataVencimento ? `‚è∞ Vencimento: ${new Date(fatura.dataVencimento).toLocaleDateString('pt-PT')}` : ''}

üõçÔ∏è PRODUTOS:
${fatura.produtos.map((produto, index) => 
  `${index + 1}. ${produto.nome}
   Qtd: ${produto.quantidade} ${produto.unidade}
   Pre√ßo: ‚Ç¨${produto.precoUnitario.toFixed(2)}
   Total: ‚Ç¨${produto.precoTotal.toFixed(2)}`
).join('\n\n')}

üí∞ TOTAIS:
Subtotal: ‚Ç¨${fatura.valorSubtotal.toFixed(2)}
IVA (23%): ‚Ç¨${fatura.valorIVA.toFixed(2)}
TOTAL: ‚Ç¨${fatura.valorTotal.toFixed(2)}

üìã Status: ${fatura.status}
${fatura.observacoes ? `\nüìù Observa√ß√µes: ${fatura.observacoes}` : ''}

Generated by Peralta Gardens App
      `.trim();

      await Share.share({
        message: conteudoFatura,
        title: `Fatura ${fatura.numero}`,
      });
    } catch (error) {
      console.error('Erro ao compartilhar:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel compartilhar a fatura.');
    }
  };

  const contactarFornecedor = (tipo) => {
    const fornecedor = fatura.fornecedor;
    
    switch (tipo) {
      case 'telefone':
        if (fornecedor.telefone) {
          Linking.openURL(`tel:${fornecedor.telefone}`);
        } else {
          Alert.alert('Erro', 'Telefone n√£o dispon√≠vel para este fornecedor.');
        }
        break;
      case 'email':
        if (fornecedor.email) {
          Linking.openURL(`mailto:${fornecedor.email}?subject=Fatura ${fatura.numero}`);
        } else {
          Alert.alert('Erro', 'Email n√£o dispon√≠vel para este fornecedor.');
        }
        break;
    }
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Detalhes da Fatura</Text>
        <TouchableOpacity onPress={compartilharFatura}>
          <Ionicons name="share-outline" size={24} color="#fff" />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* N√∫mero e Status */}
        <View style={styles.section}>
          <View style={styles.faturaHeader}>
            <View>
              <Text style={styles.faturaNumero}>{fatura.numero}</Text>
              <Text style={styles.faturaData}>
                {new Date(fatura.dataFatura).toLocaleDateString('pt-PT')}
              </Text>
            </View>
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(fatura.status) }]}>
              <Ionicons name={getStatusIcon(fatura.status)} size={16} color="#fff" />
              <Text style={styles.statusText}>{fatura.status}</Text>
            </View>
          </View>
        </View>

        {/* Imagem da Fatura */}
        {fatura.imagemFatura && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Imagem da Fatura</Text>
            <Image source={{ uri: fatura.imagemFatura }} style={styles.imagemFatura} />
          </View>
        )}

        {/* Dados do Fornecedor */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Fornecedor</Text>
          <View style={styles.fornecedorCard}>
            <View style={styles.fornecedorInfo}>
              <Text style={styles.fornecedorNome}>{fatura.fornecedor.nome}</Text>
              {fatura.fornecedor.nif && (
                <Text style={styles.fornecedorDetalhe}>NIF: {fatura.fornecedor.nif}</Text>
              )}
              {fatura.fornecedor.morada && (
                <Text style={styles.fornecedorDetalhe}>{fatura.fornecedor.morada}</Text>
              )}
            </View>
            <View style={styles.fornecedorAcoes}>
              {fatura.fornecedor.telefone && (
                <TouchableOpacity
                  style={styles.btnContato}
                  onPress={() => contactarFornecedor('telefone')}
                >
                  <Ionicons name="call" size={20} color="#4caf50" />
                </TouchableOpacity>
              )}
              {fatura.fornecedor.email && (
                <TouchableOpacity
                  style={styles.btnContato}
                  onPress={() => contactarFornecedor('email')}
                >
                  <Ionicons name="mail" size={20} color="#2196f3" />
                </TouchableOpacity>
              )}
            </View>
          </View>
        </View>

        {/* Datas */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Datas</Text>
          <View style={styles.datasContainer}>
            <View style={styles.dataItem}>
              <Ionicons name="calendar" size={16} color="#666" />
              <Text style={styles.dataLabel}>Data da Fatura:</Text>
              <Text style={styles.dataValor}>
                {new Date(fatura.dataFatura).toLocaleDateString('pt-PT')}
              </Text>
            </View>
            {fatura.dataVencimento && (
              <View style={styles.dataItem}>
                <Ionicons name="alarm" size={16} color="#666" />
                <Text style={styles.dataLabel}>Vencimento:</Text>
                <Text style={styles.dataValor}>
                  {new Date(fatura.dataVencimento).toLocaleDateString('pt-PT')}
                </Text>
              </View>
            )}
            {fatura.dataPagamento && (
              <View style={styles.dataItem}>
                <Ionicons name="checkmark-circle" size={16} color="#4caf50" />
                <Text style={styles.dataLabel}>Pagamento:</Text>
                <Text style={styles.dataValor}>
                  {new Date(fatura.dataPagamento).toLocaleDateString('pt-PT')}
                </Text>
              </View>
            )}
          </View>
        </View>

        {/* Produtos */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Produtos</Text>
          {fatura.produtos.map((produto, index) => (
            <View key={index} style={styles.produtoItem}>
              <View style={styles.produtoHeader}>
                <Text style={styles.produtoNome}>{produto.nome}</Text>
                <Text style={styles.produtoTotal}>‚Ç¨{produto.precoTotal.toFixed(2)}</Text>
              </View>
              <View style={styles.produtoDetalhes}>
                {produto.categoria && (
                  <Text style={styles.produtoCategoria}>{produto.categoria}</Text>
                )}
                <Text style={styles.produtoQuantidade}>
                  {produto.quantidade} {produto.unidade} √ó ‚Ç¨{produto.precoUnitario.toFixed(2)}
                </Text>
              </View>
            </View>
          ))}
        </View>

        {/* Totais */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Resumo Financeiro</Text>
          <View style={styles.totaisContainer}>
            <View style={styles.totalRow}>
              <Text style={styles.totalLabel}>Subtotal:</Text>
              <Text style={styles.totalValue}>‚Ç¨{fatura.valorSubtotal.toFixed(2)}</Text>
            </View>
            <View style={styles.totalRow}>
              <Text style={styles.totalLabel}>IVA (23%):</Text>
              <Text style={styles.totalValue}>‚Ç¨{fatura.valorIVA.toFixed(2)}</Text>
            </View>
            <View style={[styles.totalRow, styles.totalFinal]}>
              <Text style={styles.totalLabelFinal}>Total:</Text>
              <Text style={styles.totalValueFinal}>‚Ç¨{fatura.valorTotal.toFixed(2)}</Text>
            </View>
          </View>
        </View>

        {/* Observa√ß√µes */}
        {fatura.observacoes && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Observa√ß√µes</Text>
            <Text style={styles.observacoes}>{fatura.observacoes}</Text>
          </View>
        )}

        {/* Informa√ß√µes Adicionais */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Informa√ß√µes</Text>
          <View style={styles.infoContainer}>
            <View style={styles.infoRow}>
              <Ionicons name="camera" size={16} color="#666" />
              <Text style={styles.infoLabel}>M√©todo de inser√ß√£o:</Text>
              <Text style={styles.infoValue}>
                {fatura.metodoInsercao === 'ocr' ? 'OCR (Foto)' : 'Manual'}
              </Text>
            </View>
            <View style={styles.infoRow}>
              <Ionicons name="time" size={16} color="#666" />
              <Text style={styles.infoLabel}>Criado em:</Text>
              <Text style={styles.infoValue}>
                {new Date(fatura.dataCriacao).toLocaleDateString('pt-PT')} √†s{' '}
                {new Date(fatura.dataCriacao).toLocaleTimeString('pt-PT')}
              </Text>
            </View>
          </View>
        </View>

        <View style={{ height: 100 }} />
      </ScrollView>

      {/* Bot√µes de A√ß√£o */}
      <View style={styles.acoesContainer}>
        {fatura.status !== 'Paga' && (
          <TouchableOpacity style={styles.btnPagar} onPress={confirmarPagamento}>
            <Ionicons name="checkmark" size={20} color="#fff" />
            <Text style={styles.btnPagarText}>Marcar como Paga</Text>
          </TouchableOpacity>
        )}
        
        <View style={styles.acoesSecundarias}>
          <TouchableOpacity
            style={styles.btnSecundario}
            onPress={() => navigation.navigate('EditarFaturaFornecedor', { faturaId: fatura.id })}
          >
            <Ionicons name="create" size={20} color="#2196f3" />
            <Text style={styles.btnSecundarioText}>Editar</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.btnSecundario} onPress={compartilharFatura}>
            <Ionicons name="share" size={20} color="#ff9800" />
            <Text style={styles.btnSecundarioText}>Compartilhar</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.btnSecundario} onPress={confirmarRemocao}>
            <Ionicons name="trash" size={20} color="#f44336" />
            <Text style={styles.btnSecundarioText}>Remover</Text>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#2e7d32',
    paddingTop: 50,
    paddingBottom: 15,
    paddingHorizontal: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff',
    flex: 1,
    textAlign: 'center',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
  },
  faturaHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  faturaNumero: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  faturaData: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  statusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  statusText: {
    fontSize: 12,
    color: '#fff',
    fontWeight: '500',
    marginLeft: 6,
  },
  imagemFatura: {
    width: '100%',
    height: 250,
    borderRadius: 8,
    resizeMode: 'contain',
  },
  fornecedorCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  fornecedorInfo: {
    flex: 1,
  },
  fornecedorNome: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  fornecedorDetalhe: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  fornecedorAcoes: {
    flexDirection: 'row',
  },
  btnContato: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f5f5f5',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
  datasContainer: {
    gap: 12,
  },
  dataItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  dataLabel: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
    flex: 1,
  },
  dataValor: {
    fontSize: 14,
    color: '#333',
    fontWeight: '500',
  },
  produtoItem: {
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
    paddingBottom: 12,
    marginBottom: 12,
  },
  produtoHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 4,
  },
  produtoNome: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    flex: 1,
  },
  produtoTotal: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2e7d32',
  },
  produtoDetalhes: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  produtoCategoria: {
    fontSize: 12,
    color: '#999',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  produtoQuantidade: {
    fontSize: 14,
    color: '#666',
  },
  totaisContainer: {
    gap: 8,
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 4,
  },
  totalLabel: {
    fontSize: 16,
    color: '#666',
  },
  totalValue: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  totalFinal: {
    borderTopWidth: 1,
    borderTopColor: '#ddd',
    marginTop: 8,
    paddingTop: 12,
  },
  totalLabelFinal: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  totalValueFinal: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2e7d32',
  },
  observacoes: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
  infoContainer: {
    gap: 8,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  infoLabel: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
    flex: 1,
  },
  infoValue: {
    fontSize: 14,
    color: '#333',
  },
  acoesContainer: {
    backgroundColor: '#fff',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  btnPagar: {
    backgroundColor: '#4caf50',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 8,
    marginBottom: 12,
  },
  btnPagarText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  acoesSecundarias: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  btnSecundario: {
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  btnSecundarioText: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
  },
});
